local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})


local MainTab = Window:CreateTab("Autofarms", 4483362458) -- Title, Image


local Toggle = MainTab:CreateToggle({
   Name = "Toggle Example",
   CurrentValue = True,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
local boatType = "Alabama-class container ship"

local YourShitp = nil

local p = game:GetService("Players").LocalPlayer
local Character = p.Character
local UIS = game:GetService("UserInputService")
local CF = CFrame.new
local V3 = Vector3.new
for _,v in pairs(workspace:GetDescendants())do
   if v.Name == boatType and v:FindFirstChild("Regen") and v.Regen.Gunboat.VehicleSeat.ShipControl.OWNER.Value.Name == game:GetService("Players").LocalPlayer.Name then
       print("found boat")
       YourShitp = v
   end
end
local argsToStart = {
   [1] = "load",
   [2] = YourShitp,
   [3] = workspace.ContainerDock4
}
local argsToStop = {
   [1] = "sell",
   [2] = YourShitp,
   [3] = workspace.ContainerDock3
}

YourShitp.PrimaryPart = YourShitp.Regen.Gunboat.Base
local function MoveShitpTo(cfrm)
   YourShitp:SetPrimaryPartCFrame(CF(cfrm))
end
local function notify(texto)
   game:GetService("StarterGui"):SetCore("SendNotification",{
Title = "DSS3 gaming autofarm",
Text = texto
})
end

       notify("began autofarming")
       while true do
       notify("cycle")
       MoveShitpTo(V3(-14376, 41, -43586))
       wait(5)
       workspace.HandleCargoEvent:FireServer(unpack(argsToStart))
       notify("picked up cargo")
       wait(300)
       MoveShitpTo(V3(-5978, 41, 26999))
       wait(5)
       workspace.HandleCargoEvent:FireServer(unpack(argsToStop))
       notify("sold cargo")
       wait(5)
       end
   end
end)
--workspace.Buildings["PuertoUshuaia"]:Destroy()
   end,
})



